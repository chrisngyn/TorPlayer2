package ui

import "fmt"
import "TorPlayer2/torrent"
import "TorPlayer2/subtitle"
import "TorPlayer2/handler/uri"
import "TorPlayer2/i18n"

func getSubtitleFiles(info torrent.Info) []torrent.File {
	var files []torrent.File
	for _, file := range info.Files {
		if isSubtitleFile(file.DisplayPath) {
			files = append(files, file)
		}
	}
	return files
}

templ VideoPlayer(info torrent.Info, fileName string) {
	@layout(fileName) {
		<main class="box-border px-4 py-2">
			<h1 class="my-2 text-2xl">{ fileName }</h1>
			<video
				controls
				autoplay
				disablepictureinpicture
				preload="auto"
				crossorigin="anonymous"
				class="w-full shadow-sm shadow-stone-900"
			>
				<source src={ uri.StreamURI(info.InfoHash, fileName) } type="video/mp4"/>
				<div id="track"></div>
			</video>
			@subtitleController(info, subtitle.State{})
		</main>
	}
}

templ Subtitle(torrentInfo torrent.Info, state subtitle.State) {
	@track(state)
	@subtitleController(torrentInfo, state)
}

templ subtitleController(torrentInfo torrent.Info, state subtitle.State) {
	<section id="subtitleCtrl" class="subtitle-controller mt-4 flex flex-col">
		<div class="flex items-center justify-between">
			<h3 class="my-4 text-xl font-bold">
				<span class="border-b-2 border-red-700 pb-1">{ i18n.T(ctx, "Subtitle.Title") }</span>
			</h3>
			<p class="pr-1 text-sm">{ state.Name }</p>
		</div>
		<div class="grid grid-cols-2 gap-1">
			<div
				class="col-span-1 flex flex-col rounded-sm px-1 py-3 hover:bg-stone-700"
			>
				<h4 class="mb-1 text-sm font-thin">{ i18n.T(ctx, "Subtitle.Adjustment.Title") }</h4>
				<div
					class="flex items-center"
					hx-include="[name='name'], [name='originalContent']"
				>
					<input type="hidden" name="name" value={ state.Name }/>
					<input type="hidden" name="originalContent" value={ toBase64(state.OriginalContent) }/>
					<button
						class="m-1 rounded bg-stone-900 px-4 py-2 hover:bg-red-700"
						hx-post={ fmt.Sprintf("/torrents/%s/adjust-subtitle?adjustmentMilliseconds=0", torrentInfo.InfoHash) }
						hx-target="#subtitleCtrl"
						hx-swap="outerHTML"
					>
						<i icon="fa-solid fa-eraser"></i> { i18n.T(ctx, "Subtitle.Adjustment.Reset") }
					</button>
					<button
						class="m-1 rounded bg-stone-900 px-4 py-2 hover:bg-red-700"
						hx-post={ fmt.Sprintf("/torrents/%s/adjust-subtitle?adjustmentMilliseconds=%d", torrentInfo.InfoHash, state.AdjustmentMilliseconds-500) }
						hx-target="#subtitleCtrl"
						hx-swap="outerHTML"
					>
						<i icon="fa-solid fa-backward"></i> -0.5s
					</button>
					<p class="mx-2">{ toString(state.AdjustmentMilliseconds) }ms</p>
					<button
						class="ml-2 rounded bg-stone-900 px-4 py-2 hover:bg-red-700"
						hx-post={ fmt.Sprintf("/torrents/%s/adjust-subtitle?adjustmentMilliseconds=%d", torrentInfo.InfoHash, state.AdjustmentMilliseconds+500) }
						hx-target="#subtitleCtrl"
						hx-swap="outerHTML"
					>
						<i icon="fa-solid fa-forward"></i> +0.5s
					</button>
				</div>
			</div>
			<div
				class="col-span-1 flex flex-col rounded-sm px-1 py-3 hover:bg-stone-700"
			>
				<h4 class="mb-1 text-sm font-thin">{ i18n.T(ctx, "Subtitle.AddFromFile") }</h4>
				<input
					type="file"
					name="fileInput"
					accept=".vtt, .srt, application/x-subrip, text/vtt"
					class="rounded border border-gray-400 bg-stone-700 text-stone-100 file:mr-5 file:rounded-l file:border-[0px] file:bg-stone-700 file:p-4 file:text-stone-100 hover:border-red-700 hover:file:cursor-pointer hover:file:bg-stone-800 hover:file:text-red-700"
					hx-encoding="multipart/form-data"
					hx-post={ fmt.Sprintf("/torrents/%s/upload-subtitle", torrentInfo.InfoHash) }
					hx-target="#subtitleCtrl"
				/>
			</div>
		</div>
		if len(getSubtitleFiles(torrentInfo)) > 0 {
			<div class="mt-2 rounded-sm">
				<h4 class="mb-1 px-1 py-1 text-lg">{ i18n.T(ctx, "Subtitle.AvailableSubtitles") }</h4>
				<div class="flex flex-wrap gap-2">
					for _, file := range getSubtitleFiles(torrentInfo) {
						if state.Name == file.DisplayPath {
							<button
								class="inline-flex justify-center items-center space-x-1 rounded bg-red-600 px-4 py-2 text-slate-100 hover:bg-red-700"
								hx-delete={ uri.UnsetSubtitleURI(torrentInfo.InfoHash) }
								hx-target="#subtitleCtrl"
								hx-swap="outerHTML"
								hx-indicator="find .htmx-indicator"
							>
								<span>{ file.DisplayPath }</span>
								<img class="htmx-indicator w-6 h-6" src="/static/loading.svg"/>
							</button>
						} else {
							<button
								class="inline-flex justify-center items-center space-x-1 rounded bg-stone-900 px-4 py-2 text-slate-100 hover:bg-stone-800"
								hx-post={ uri.SelectSubtitleURI(torrentInfo.InfoHash, file.DisplayPath) }
								hx-target="#subtitleCtrl"
								hx-swap="outerHTML"
								hx-indicator="find .htmx-indicator"
							>
								<span>{ file.DisplayPath }</span>
								<img class="htmx-indicator w-6 h-6" src="/static/loading.svg"/>
							</button>
						}
					}
				</div>
			</div>
		}
	</section>
}

templ track(state subtitle.State) {
	if len(state.Content) == 0 {
		<div id="track" hx-swap-oob="outerHTML:#track"></div>
	} else {
		<track
			id="track"
			hx-swap-oob="outerHTML:#track"
			kind="subtitles"
			label={ state.Name }
			srclang="en"
			src={ fmt.Sprintf("data:text/vtt;base64,%s", toBase64(state.Content)) }
			default
		/>
	}
}
