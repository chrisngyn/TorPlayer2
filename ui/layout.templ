package ui

import "TorPlayer2/request"
import "TorPlayer2/i18n"
import "TorPlayer2/setting"
import "TorPlayer2/handler/uri"

templ layout(title string) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<meta name="htmx-config" content='{"includeIndicatorStyles": false}'/>
			<link rel="icon" type="image/x-icon" href="/static/favicon.ico"/>
			<link href="/static/style/output.css" rel="stylesheet"/>
			<script src="https://kit.fontawesome.com/aff606e071.js" crossorigin="anonymous"></script>
			<script src="https://unpkg.com/htmx.org@1.9.10" integrity="sha384-D1Kt99CQMDuVetoL1lrYwg5t+9QdHe7NLX/SoJYkXDFfX37iInKRy5xLSi8nO7UC" crossorigin="anonymous"></script>
			<script src="https://unpkg.com/htmx.org/dist/ext/debug.js"></script>
			<title>{ title }</title>
		</head>
		<body
			class="box-border flex min-h-screen w-full flex-col bg-stone-800 text-slate-100"
		>
			<nav class="flex items-center justify-between bg-stone-900 px-4 py-4">
				<a href="/" class="text-2xl font-bold">
					<div class="flex flex-shrink-0 items-center">
						<img src="/static/logo.png" alt="TorPlayer" class="m-2 inline h-8"/>
						<span class="text-xl font-bold">TorPlayer</span>
					</div>
				</a>
				<div class="flex">
					@menu()
					@language()
				</div>
			</nav>
			{ children... }
		</body>
	</html>
}

var menuItems = []struct {
	Link      string
	MessageID string
}{
	{"/", "Nav.Home"},
	{"/torrents", "Nav.Torrents"},
}

templ menu() {
	<ul class="flex">
		for _, item := range menuItems {
			<li
				if item.Link == request.GetContext(ctx).URL {
					class="mr-6 border-b-2 border-red-700 p-2"
				} else {
					class="mr-6 p-2"
				}
			>
				<a class="hover:text-red-700" href={ templ.SafeURL(item.Link) }>{ i18n.T(ctx, item.MessageID) }</a>
			</li>
		}
	</ul>
}

var languages = []struct {
	Locale string
	Name   string
	Flag   string
}{
	{"vi", "VN", "ðŸ‡»ðŸ‡³"},
	{"en", "EN", "ðŸ‡¬ðŸ‡§"},
}

func isSelectedLanguage(ctx context.Context, locale string) bool {
	return locale == setting.GetSettingFromContext(ctx).Locale
}

templ language() {
	<div class="inline-flex -space-x-px text-xs">
		for i := 0; i < len(languages); i++ {
			<button
				type="button"
				class={
					"border", "border-gray-400", "px-4", "py-2", "text-slate-100",
					templ.KV("rounded-l", i == 0),
					templ.KV("rounded-r", i == len(languages)-1),
					templ.KV("bg-red-600", isSelectedLanguage(ctx, languages[i].Locale)),
					templ.KV("hover:bg-red-700", isSelectedLanguage(ctx, languages[i].Locale)),
					templ.KV("bg-stone-900", !isSelectedLanguage(ctx, languages[i].Locale)),
					templ.KV("hover:bg-stone-800", !isSelectedLanguage(ctx, languages[i].Locale)),
				}
				if !isSelectedLanguage(ctx, languages[i].Locale) {
					hx-post={uri.ChangeLanguageURI(languages[i].Locale)}
					hx-trigger="click"
					hx-swap="none"
					hx-on::after-request="document.location.reload()"
				}
			>
			{ languages[i].Name } <span>{ languages[i].Flag }</span>
			</button>
		}
	</div>
}
