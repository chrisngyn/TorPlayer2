package ui

import "TorPlayer2/torrent"
import "TorPlayer2/handler/uri"
import "TorPlayer2/i18n"

templ Info(infoHash string, info torrent.Info) {
	@layout(info.Name) {
		<main
			class="box-border px-4 py-2"
			hx-get={ uri.InfoURI(infoHash) }
			hx-trigger="every 1s"
			hx-swap="outerHTML"
			hx-target="body"
			hx-indicator="none"
		>
			<p class="text-sm italic">Info Hash: { infoHash }</p>
			<h1 class="text-2xl font-bold">{ info.Name }</h1>
			<p class="text-sm">
				<span>{ i18n.T(ctx, "Info.Size") }: { byteCounter(info.Length) }</span>
			</p>
			<div class="mt-4">
				<h3 class="text-bold">{ i18n.T(ctx, "Info.Statistics") }</h3>
				<div class="grid grid-cols-3 gap-x-4 gap-y-2 text-sm">
					<p>Total Peers: { toString(info.Stats.TotalPeers) }</p>
					<p>Active Peers: { toString(info.Stats.ActivePeers) }</p>
					<p>Pending Peers: { toString(info.Stats.PendingPeers) }</p>
					<p>Connected Seeders: { toString(info.Stats.ConnectedSeeders) }</p>
					<p>Haft Open Peers: { toString(info.Stats.HalfOpenPeers) }</p>
				</div>
				<div class="mt-2">
					@progressBar(info.BytesCompleted, info.Length)
				</div>
			</div>
			<table
				class="my-4 w-full table-auto border-2 border-gray-400 shadow-md shadow-stone-900"
			>
				<thead>
					<tr class="border-b-2 border-gray-400 bg-stone-800">
						<th class="px-4 py-2">{ i18n.T(ctx, "Info.Name") }</th>
						<th class="px-4 py-2">{ i18n.T(ctx, "Info.Length") }</th>
						<th class="px-4 py-2">{ i18n.T(ctx, "Info.Completed") }</th>
						<th class="px-4 py-2">{ i18n.T(ctx, "Info.Action") }</th>
					</tr>
				</thead>
				<tbody>
					for _, file := range info.Files {
						<tr class="hover:text-red-600">
							<td class="px-4 py-2">{ file.DisplayPath }</td>
							<td class="px-4 py-2 text-right">{ byteCounter(file.Length) }</td>
							<td class="px-4 py-2 text-right">{ percent(file.BytesCompleted, file.Length) }</td>
							<td class="px-4 py-2 text-center">
								if isVideoFile(file.DisplayPath) {
									<a
										type="button"
										href={ templ.SafeURL(uri.WatchURI(infoHash, file.DisplayPath)) }
										class="inline-flex justify-center items-center space-x-1 rounded-sm bg-red-600 px-4 py-2 text-slate-100 hover:bg-red-700 shadow-md shadow-stone-900"
									>
										<i class="fa-solid fa-play"></i>
										<span>{ i18n.T(ctx, "Info.Button.Watch") }</span>
									</a>
									<button
										type="button"
										hx-get={ uri.OpenInVLCURI(infoHash, file.DisplayPath) }
										hx-trigger="click"
										hx-swap="none"
										hx-indicator=".htmx-indicator"
										class="inline-flex justify-center items-center space-x-1 rounded-sm bg-red-600 px-4 py-2 text-slate-100 hover:bg-red-700 shadow-md shadow-stone-900"
									>
										<i class="fa-solid fa-film"></i>
										<span>{ i18n.T(ctx, "Info.Button.OpenInVLC") }</span>
										<img class="htmx-indicator w-6 h-6" src="/static/loading.svg"/>
									</button>
								}
							</td>
						</tr>
					}
				</tbody>
			</table>
		</main>
	}
}
